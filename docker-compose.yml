services:
  db:
    image: postgres:15
    container_name: docking_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: docking_pgadmin
    env_file:
      - .env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    restart: always

  rabbitmq:
      image: rabbitmq:3-management
      container_name: docking_rabbitmq
      environment:
        - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
        - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      ports:
        - "5672:5672"
        - "15672:15672"   
      restart: always

  web:
    build: .
    container_name: docking_web
    env_file:
      - .env
    command: bash /app/entrypoint.sh
    volumes:
      - .:/app
      - molecules_data:/app/files/molecules
      - processes_data:/app/files/processes 
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: always

  celery_worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: docking_celery_worker
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=djangoAPI.settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    command: bash worker/entrypoint.sh
    volumes:
      - .:/app
      - molecules_data:/app/files/molecules
      - processes_data:/app/files/processes 
    # gpus: all
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    depends_on:
      rabbitmq:
        condition: service_started
    restart: always

volumes:
  postgres_data:
  pgadmin_data:
  molecules_data:
  processes_data:     